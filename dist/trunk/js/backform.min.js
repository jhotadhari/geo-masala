!function(a,b){if("function"==typeof define&&define.amd)define(["underscore","jquery","backbone"],function(c,d,e){return b(a,c,d,e)});else if("undefined"!=typeof exports){var c=require("underscore");b(a,c,a.jQuery||a.$||a.Zepto||a.ender,a.Backbone)}else b(a,a._,a.jQuery||a.Zepto||a.ender||a.$,a.Backbone)}(this,function(a,b,c,d){Backform=a.Backform={formClassName:"backform form-horizontal",groupClassName:"form-group",controlLabelClassName:"control-label col-sm-4",controlsClassName:"col-sm-8",controlClassName:"form-control",helpClassName:"help-block",errorClassName:"has-error",helpMessageClassName:"help-block",hiddenClassName:"hidden",requiredInputClassName:void 0,bootstrap2:function(){b.extend(Backform,{groupClassName:"control-group",controlLabelClassName:"control-label",controlsClassName:"controls",controlClassName:"input-xlarge",helpClassName:"text-error",errorClassName:"error",helpMessageClassName:"help-message small"}),b.each(Backform,function(a,c){b.isFunction(Backform[c])&&b.isFunction(Backform[c].prototype.bootstrap2)&&Backform[c].prototype.bootstrap2()})},resolveNameToClass:function(a,c){if(b.isString(a)){var d=b.map(a.split("-"),function(a){return a.slice(0,1).toUpperCase()+a.slice(1)}).join("")+c,e=Backform[d];if(b.isUndefined(e))throw new ReferenceError("Class '"+d+"' not found");return e}return a}};var e=(Backform.Form=d.View.extend({fields:void 0,errorModel:void 0,tagName:"form",className:function(){return Backform.formClassName},initialize:function(a){a.fields instanceof d.Collection||(a.fields=new h(a.fields||this.fields)),this.fields=a.fields,this.model.errorModel=a.errorModel||this.model.errorModel||new d.Model,this.controls=[]},cleanup:function(){b.each(this.controls,function(a){a.remove()}),this.controls.length=0},remove:function(){this.cleanup(),d.View.prototype.remove.apply(this,arguments)},render:function(){this.cleanup(),this.$el.empty();var a=this.$el,b=this.model,c=this.controls;return this.fields.each(function(d){var e=new(d.get("control"))({field:d,model:b});a.append(e.render().$el),c.push(e)}),this}}),Backform.ControlFormatter=function(){});b.extend(e.prototype,{fromRaw:function(a,b){return a},toRaw:function(a,b){return a}});var f=Backform.JSONFormatter=function(){};b.extend(f.prototype,{fromRaw:function(a,b){return JSON.stringify(a)},toRaw:function(a,b){return JSON.parse(a)}});var g=Backform.Field=d.Model.extend({defaults:{name:"",placeholder:"",disabled:!1,visible:!0,required:!1,value:void 0,control:void 0,formatter:void 0},initialize:function(a,b){var c=Backform.resolveNameToClass(this.get("control"),"Control");this.set({control:c},{silent:!0})}}),h=Backform.Fields=d.Collection.extend({model:g}),i=Backform.Control=d.View.extend({defaults:{},className:function(){return Backform.groupClassName},events:{"keydown :input":"processTab"},template:b.template(['<label class="<%=Backform.controlLabelClassName%>"><%=label%></label>','<div class="<%=Backform.controlsClassName%>">','  <span class="<%=Backform.controlClassName%> uneditable-input">',"    <%=value%>","  </span>","</div>"].join("\n")),initialize:function(a){this.field=a.field;var c=Backform.resolveNameToClass(this.field.get("formatter")||this.formatter,"Formatter");b.isFunction(c.fromRaw)||b.isFunction(c.toRaw)||(c=new c),this.formatter=c;var e=this.field.get("name").split("."),f=e.shift();this.listenTo(this.model,"change:"+f,this.render),this.model.errorModel instanceof d.Model&&this.listenTo(this.model.errorModel,"change:"+f,this.updateInvalid)},formatter:e,getValueFromDOM:function(){return this.formatter.toRaw(this.$el.find(".uneditable-input").text(),this.model)},onChange:function(a){var e=this.model,f=(c(a.target),this.field.get("name").split(".")),g=f.shift(),h=f.join("."),i=this.getValueFromDOM(),j={};if(this.model.errorModel instanceof d.Model)if(b.isEmpty(h))this.model.errorModel.unset(g);else{var k=this.model.errorModel.get(g);k&&(this.keyPathSetter(k,h,null),this.model.errorModel.set(g,k))}j[g]=b.isEmpty(h)?i:b.clone(e.get(g))||{},b.isEmpty(h)||this.keyPathSetter(j[g],h,i),this.stopListening(this.model,"change:"+g,this.render),e.set(j),this.listenTo(this.model,"change:"+g,this.render)},render:function(){var a=b.defaults(this.field.toJSON(),this.defaults),c=this.model.toJSON(),d=a.name.split("."),e=d.shift(),f=d.join("."),g=this.keyPathAccessor(c[e],f),h=b.extend(a,{rawValue:g,value:this.formatter.fromRaw(g,this.model),attributes:c,formatter:this.formatter}),i=function(a,c){return b.isFunction(a)?!!a(c):!!a};return b.extend(h,{disabled:i(h.disabled,this.model),visible:i(h.visible,this.model),required:i(h.required,this.model)}),this.$el.removeClass(Backform.hiddenClassName),h.visible||this.$el.addClass(Backform.hiddenClassName),Backform.requiredInputClassName&&this.$el.removeClass(Backform.requiredInputClassName),h.required&&this.$el.addClass(Backform.requiredInputClassName),this.$el.html(this.template(h)).addClass(a.name),this.updateInvalid(),this},clearInvalid:function(){return this.$el.removeClass(Backform.errorClassName).find("."+Backform.helpClassName+".error").remove(),this},updateInvalid:function(){var a=this,e=this.model.errorModel;return e instanceof d.Model?(this.clearInvalid(),this.$el.find(":input").not("button").each(function(d,f){var g=c(f).attr("name").split("."),h=(g.shift(),g.join("."),a.keyPathAccessor(e.toJSON(),c(f).attr("name")));b.isEmpty(h)||b.isEmpty(h)||(a.$el.addClass(Backform.errorClassName),a.$el.find("."+Backform.controlsClassName).append('<span class="'+Backform.helpClassName+' error">'+(b.isArray(h)?h.join(", "):h)+"</span>"))}),this):this},keyPathAccessor:function(a,c){var d=a;c=c.split(".");for(var e=0;e<c.length;e++){if(b.isNull(d))return null;b.isEmpty(c[e])||b.isUndefined(d[c[e]])||(d=d[c[e]])}return b.isObject(d)&&!b.isArray(d)?null:d},keyPathSetter:function(a,b,c){for(b=b.split(".");b.length>1;)a[b[0]]||(a[b[0]]={}),a=a[b.shift()];return a[b.shift()]=c},processTab:function(a){if(9==a.which){var b=c(a.currentTarget);setTimeout(function(){var c;c=a.shiftKey?b.prevAll(":input:visible").length?b.prevAll(":input:visible").first():b.closest(".control-group:visible").prev(".control-group:visible").find(":input:visible"):b.nextAll(":input:visible").length?b.nextAll(":input:visible").first():b.closest(".control-group:visible").next(".control-group:visible").find(":input:visible"),c.length&&c.first().focus()},0)}}}),j=(Backform.UneditableInputControl=i,Backform.HelpControl=i.extend({template:b.template(['<label class="<%=Backform.controlLabelClassName%>">&nbsp;</label>','<div class="<%=Backform.controlsClassName%>">','  <span class="<%=Backform.helpMessageClassName%> help-block"><%=label%></span>',"</div>"].join("\n"))}),Backform.SpacerControl=i.extend({template:b.template(['<label class="<%=Backform.controlLabelClassName%>">&nbsp;</label>','<div class="<%=Backform.controlsClassName%>"></div>'].join("\n"))}),Backform.TextareaControl=i.extend({defaults:{label:"",maxlength:4e3,extraClasses:[],helpMessage:null},template:b.template(['<label class="<%=Backform.controlLabelClassName%>"><%=label%></label>','<div class="<%=Backform.controlsClassName%>">','  <textarea class="<%=Backform.controlClassName%> <%=extraClasses.join(\' \')%>" name="<%=name%>" maxlength="<%=maxlength%>" placeholder="<%-placeholder%>" <%=disabled ? "disabled" : ""%> <%=required ? "required" : ""%>><%-value%></textarea>',"  <% if (helpMessage && helpMessage.length) { %>",'    <span class="<%=Backform.helpMessageClassName%>"><%=helpMessage%></span>',"  <% } %>","</div>"].join("\n")),events:b.extend({},i.prototype.events,{"change textarea":"onChange","focus textarea":"clearInvalid"}),getValueFromDOM:function(){return this.formatter.toRaw(this.$el.find("textarea").val(),this.model)}}),Backform.SelectControl=i.extend({defaults:{label:"",options:[],extraClasses:[]},template:b.template(['<label class="<%=Backform.controlLabelClassName%>"><%=label%></label>','<div class="<%=Backform.controlsClassName%>">','  <select class="<%=Backform.controlClassName%> <%=extraClasses.join(\' \')%>" name="<%=name%>" value="<%-value%>" <%=disabled ? "disabled" : ""%> <%=required ? "required" : ""%> >',"    <% for (var i=0; i < options.length; i++) { %>","      <% var option = options[i]; %>",'      <option value="<%-formatter.fromRaw(option.value)%>" <%=option.value === rawValue ? "selected=\'selected\'" : ""%> <%=option.disabled ? "disabled=\'disabled\'" : ""%>><%-option.label%></option>',"    <% } %>","  </select>","</div>"].join("\n")),events:b.extend({},i.prototype.events,{"change select":"onChange","focus select":"clearInvalid"}),formatter:f,getValueFromDOM:function(){return this.formatter.toRaw(this.$el.find("select").val(),this.model)}})),k=(Backform.MultiSelectControl=j.extend({defaults:{label:"",options:[],extraClasses:[],height:"78px"},template:b.template(['<label class="<%=Backform.controlLabelClassName%>"><%=label%></label>','<div class="<%=Backform.controlsClassName%>">','  <select multiple="multiple" class="<%=Backform.controlClassName%> <%=extraClasses.join(\' \')%>" name="<%=name%>" value="<%-JSON.stringify(value)%>" <%=disabled ? "disabled" : ""%> <%=required ? "required" : ""%> style="height:<%=height%>">',"    <% for (var i=0; i < options.length; i++) { %>","      <% var option = options[i]; %>",'      <option value="<%-option.value%>" <%=value != null && _.indexOf(value, option.value) != -1 ? "selected=\'selected\'" : ""%> <%=option.disabled ? "disabled=\'disabled\'" : ""%>><%-option.label%></option>',"    <% } %>","  </select>","</div>"].join("\n")),events:b.extend({},i.prototype.events,{"change select":"onChange","dblclick select":"onDoubleClick","focus select":"clearInvalid"}),formatter:{fromRaw:function(a,b){return a},toRaw:function(a,b){return"object"==typeof a?a:JSON.parse(a)}},onDoubleClick:function(a){this.model.trigger("doubleclick",a)}}),Backform.InputControl=i.extend({defaults:{type:"text",label:"",maxlength:255,extraClasses:[],helpMessage:null},template:b.template(['<label class="<%=Backform.controlLabelClassName%>"><%=label%></label>','<div class="<%=Backform.controlsClassName%>">','  <input type="<%=type%>" class="<%=Backform.controlClassName%> <%=extraClasses.join(\' \')%>" name="<%=name%>" maxlength="<%=maxlength%>" value="<%-value%>" placeholder="<%-placeholder%>" <%=disabled ? "disabled" : ""%> <%=required ? "required" : ""%> />',"  <% if (helpMessage && helpMessage.length) { %>",'    <span class="<%=Backform.helpMessageClassName%>"><%=helpMessage%></span>',"  <% } %>","</div>"].join("\n")),events:b.extend({},i.prototype.events,{"change input":"onChange","focus input":"clearInvalid"}),getValueFromDOM:function(){return this.formatter.toRaw(this.$el.find("input").val(),this.model)}})),l=Backform.BooleanControl=k.extend({defaults:{type:"checkbox",label:"",controlLabel:"&nbsp;",extraClasses:[]},template:b.template(['<label class="<%=Backform.controlLabelClassName%>"><%=controlLabel%></label>','<div class="<%=Backform.controlsClassName%>">','  <div class="checkbox">',"    <label>",'      <input type="<%=type%>" class="<%=extraClasses.join(\' \')%>" name="<%=name%>" <%=value ? "checked=\'checked\'" : ""%> <%=disabled ? "disabled" : ""%> <%=required ? "required" : ""%> /> <%=label%>',"    </label>","  </div>","</div>"].join("\n")),getValueFromDOM:function(){return this.formatter.toRaw(this.$el.find("input").is(":checked"),this.model)}});return Backform.CheckboxControl=l,Backform.RadioControl=k.extend({defaults:{type:"radio",label:"",options:[],extraClasses:[],helpMessage:null},template:b.template(['<label class="<%=Backform.controlLabelClassName%>"><%=label%></label>','<div class="<%=Backform.controlsClassName%> <%=Backform.radioControlsClassName%>">',"  <% for (var i=0; i < options.length; i++) { %>","    <% var option = options[i]; %>",'    <label class="<%=Backform.radioLabelClassName%>">','      <input type="<%=type%>" class="<%=extraClasses.join(\' \')%>" name="<%=name%>" value="<%-formatter.fromRaw(option.value)%>" <%=rawValue == option.value ? "checked=\'checked\'" : ""%> <%=disabled ? "disabled" : ""%> <%=required ? "required" : ""%> /> <%-option.label%>',"    </label>","  <% } %>","  <% if (helpMessage && helpMessage.length) { %>",'    <span class="<%=Backform.helpMessageClassName%>"><%=helpMessage%></span>',"  <% } %>","</div>"].join("\n")),formatter:f,getValueFromDOM:function(){return this.formatter.toRaw(this.$el.find("input:checked").val(),this.model)},bootstrap2:function(){Backform.radioControlsClassName="controls",Backform.radioLabelClassName="radio inline"}}),b.extend(Backform,{radioControlsClassName:"checkbox",radioLabelClassName:"checkbox-inline"}),Backform.DatepickerControl=k.extend({defaults:{type:"text",label:"",options:{},extraClasses:[],maxlength:255,helpMessage:null},events:b.extend({},i.prototype.events,{"blur input":"onChange","change input":"onChange","changeDate input":"onChange","focus input":"clearInvalid"}),render:function(){return k.prototype.render.apply(this,arguments),this.$el.find("input").datepicker(this.field.get("options")),this}}),Backform.ButtonControl=i.extend({defaults:{type:"submit",label:"Submit",status:void 0,message:void 0,extraClasses:[]},template:b.template(['<label class="<%=Backform.controlLabelClassName%>">&nbsp;</label>','<div class="<%=Backform.controlsClassName%>">','  <button type="<%=type%>" name="<%=name%>" class="btn <%=extraClasses.join(\' \')%>" <%=disabled ? "disabled" : ""%> ><%=label%></button>','  <% var cls = ""; if (status == "error") cls = Backform.buttonStatusErrorClassName; if (status == "success") cls = Backform.buttonStatusSuccessClassname; %>','  <span class="status <%=cls%>"><%=message%></span>',"</div>"].join("\n")),initialize:function(){i.prototype.initialize.apply(this,arguments),this.listenTo(this.field,"change:status",this.render),this.listenTo(this.field,"change:message",this.render)},bootstrap2:function(){Backform.buttonStatusErrorClassName="text-error",Backform.buttonStatusSuccessClassname="text-success"}}),b.extend(Backform,{buttonStatusErrorClassName:"text-danger",buttonStatusSuccessClassname:"text-success"}),Backform});